package h3xadecimal.liteantiexploit.module.modules;

import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.event.PacketSendEvent;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientPlayerFlying;
import h3xadecimal.liteantiexploit.module.IPacketProcessor;

public class BorderFly implements IPacketProcessor {
    private static final double HARD_CODED_BORDER = 2.9999999E7D;

    @Override
    public String name() {
        return "BorderFly";
    }

    @Override
    public void onSend(PacketSendEvent event) {

    }

    @Override
    public void onReceive(PacketReceiveEvent event) {
        if (WrapperPlayClientPlayerFlying.isFlying(event.getPacketType())) {
            WrapperPlayClientPlayerFlying packet = new WrapperPlayClientPlayerFlying(event);

            if (!packet.hasPositionChanged()) return;
            // Y technically is uncapped, but no player will reach these values legit
            if (Math.abs(packet.getLocation().getX()) > HARD_CODED_BORDER || Math.abs(packet.getLocation().getZ()) > HARD_CODED_BORDER || Math.abs(packet.getLocation().getY()) > Integer.MAX_VALUE) {
                event.setCancelled(true);
                alert(event);
            }
        }
    }
}
