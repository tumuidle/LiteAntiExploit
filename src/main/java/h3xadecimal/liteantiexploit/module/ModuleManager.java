package h3xadecimal.liteantiexploit.module;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.event.PacketSendEvent;
import h3xadecimal.liteantiexploit.Core;
import h3xadecimal.liteantiexploit.module.modules.*;

import java.util.ArrayList;
import java.util.List;

public class ModuleManager {
    private final Core core;
    private final PacketHandler handler = new PacketHandler();
    private final List<IPacketProcessor> packetProcessors = new ArrayList<>();

    public ModuleManager(Core c) {
        core = c;
    }

    public void init() {
        core.getLogger().info("[ModuleManager] 正在加载模块");

        register(new Log4j());
        register(new TabComplete());
        register(new BorderFly());
        register(new IllegalCI());
        register(new InfiniteFly());

        PacketEvents.getAPI().getEventManager().registerListener(handler);

        core.getLogger().info("[ModuleManager] 注册了 " + packetProcessors.size() + " 个收发包检测");
    }

    public void exit() {
        core.getLogger().info("[ModuleManager] 正在终止处理");
        packetProcessors.clear();
        PacketEvents.getAPI().getEventManager().unregisterListener(handler);
    }

    private void register(IPacketProcessor proc) {
        core.sendDebug("[ModuleManager] 注册 " + proc.name());
        if (core.getPacketConfig().getBoolean(proc.name(), false)) {
            try {
                proc.onLoad();
                packetProcessors.add(proc);
            } catch (Throwable t) {
                core.getLogger().warning("[ModuleManager] 收发包检测 " + proc.name() + " 注册失败");
                t.printStackTrace();
            }
        }
    }

    class PacketHandler extends PacketListenerAbstract {
        @Override
        public void onPacketReceive(PacketReceiveEvent event) {
            for (IPacketProcessor p: packetProcessors) {
                try {
                    p.onReceive(event);
                } catch (Throwable t) {
                    core.getLogger().warning("Error in module " + p.name() + "(Incoming): " + t.getMessage());
                    t.printStackTrace();
                }
            }
        }

        @Override
        public void onPacketSend(PacketSendEvent event) {
            for (IPacketProcessor p: packetProcessors) {
                try {
                    p.onSend(event);
                } catch (Throwable t) {
                    core.getLogger().warning("Error in module " + p.name() + "(Outgoing): " + t.getMessage());
                    t.printStackTrace();
                }
            }
        }
    }
}
